{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Lokksmith is an opinionated<sup>1</sup>, modern Kotlin Multiplatform library for implementing the OpenID Connect Authorization Code Flow (with PKCE) on Android and iOS. The library offers a simple, concise and intuitive API with sensible defaults, while remaining configurable for advanced use cases.  We prioritize adherence to secure, recommended standards and patterns.</p>"},{"location":"#non-goals","title":"Non-goals","text":"<ul> <li>Full-featured OIDC / OAuth 2.0 client implementing all features of the specifications</li> <li>Authorization via (embedded) web views, which are considered insecure</li> <li>Providing a viable or user-friendly API for non-Kotlin consumers (for example Java)</li> <li>Compatibility with the legacy Android view system (though developers may implement their own   integration if needed)</li> </ul> <ol> <li> <p>This means we use libraries such as Kotlin Serialization, Ktor, and DataStore, and do not    intend to make them interchangeable with other solutions.\u00a0\u21a9</p> </li> </ol>"},{"location":"comparison/","title":"Comparison","text":"<p>The following table compares Lokksmith with the popular AppAuth-Android library.</p> Lokksmith AppAuth First Release Jun 9, 2025 Feb 26, 2016 Current Release <code>0.5.0</code>Sep 17, 2025 <code>0.11.1</code>Dec 22, 2021 Kotlin Yes No Coroutines &amp; Flows Yes No Multiplatform Yes (Android &amp; iOS) No, separate iOS library Compose Multiplatform Yes No Core Functionality independentof Mobile OS Yes No Client State Persistence Yes No Multiple Clients Management Yes No Supports HTTP/2 and beyond Yes, through Ktor No, uses Android's built-in HTTP client Supports Migration Yes No"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing! \u2764\ufe0f</p> <p>All contributions are welcome and appreciated. Please review the relevant sections below before making your first contribution. This helps maintainers and ensures a smooth experience for everyone.</p> <p>Tip</p> <p>If you like this project but don't have time or can't contribute code, you can still support us by:</p> <ul> <li>Starring the project</li> <li>Sharing it on social media or in blog posts</li> <li>Mentioning it in your project's README</li> <li>Talking about it at meetups or with friends and colleagues</li> </ul>"},{"location":"contributing/#questions","title":"Questions","text":"<p>If you have a question, please open a discussion or check the existing topics. Please do not use issues for questions and discussions as they are reserved for bug reports.</p>"},{"location":"contributing/#suggestions-feature-requests","title":"Suggestions &amp; Feature Requests","text":"<p>Before submitting a suggestion, read the documentation carefully and find out if the functionality is already covered, maybe by an individual configuration. To suggest a new feature or improvement, please open an issue and describe your idea clearly.</p>"},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>Before reporting a bug please ensure that you can reproduce the issue with the latest version <code>0.5.0</code> of Lokksmith. If this is the case, please open an issue with the following information:</p> <ul> <li>Environment<ul> <li>Device manufacturer and model</li> <li>Device's operating system (Android, iOS)</li> <li>Operating system version</li> </ul> </li> <li>Browser used for authentication flows</li> <li>Steps to reproduce</li> <li>Expected and actual behavior</li> <li>Screenshots and / or video recordings</li> <li>Minimal sample project that reproduces the issue</li> <li>Relevant logs (stack trace)</li> </ul>"},{"location":"contributing/#contributing-code","title":"Contributing Code","text":"<p>By contributing to this project, you confirm that you are the original author of your contributions, have the necessary rights to submit them, and agree that your contributions may be distributed under the project license.</p>"},{"location":"contributing/#setup","title":"Setup","text":"<ul> <li>Use the latest stable version of Android Studio for   development.</li> <li>Optional: Install the latest LTS version of NodeJS.<ul> <li>Run <code>npm install</code> in the root folder of the project to set up Git commit hooks.</li> </ul> </li> </ul> <p>Info</p> <p>Code style and commit messages are verified via Continuous  Integration. Therefore we suggest setting up the commit hooks to catch errors early.</p>"},{"location":"contributing/#rules","title":"Rules","text":"<ul> <li>Document your code.</li> <li>Ensure your code is covered by unit tests.</li> <li>If you use a LLM for code generation, clearly state this in your pull request.   All generated code must be thoroughly reviewed by humans.</li> </ul>"},{"location":"contributing/#styleguide","title":"Styleguide","text":""},{"location":"contributing/#code","title":"Code","text":"<ul> <li>Follow the Kotlin Coding Conventions.</li> <li>Use spaces with an indentation of 4 characters.</li> </ul> <p>Tip</p> <p>Run <code>./gradlew spotlessApply</code> to format source code according to our rules.</p>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<ul> <li>Use the Conventional Commits specification.</li> <li>Write commit messages in present tense, imperative mood (e.g., <code>feat: add abc to xyz</code>).</li> </ul> Attribution <p>This guide is based on the contributing.md generator.</p>"},{"location":"dependency-matrix/","title":"Dependency Matrix","text":"<p>The tables below detail the dependencies for Lokksmith artifacts. While Lokksmith may be compatible with other (minor) versions of transitive dependencies, use them with caution.</p>"},{"location":"dependency-matrix/#lokksmith-core","title":"lokksmith-core","text":"Version Kotlin Coroutines Serialization Ktor 0.1.x 2.1.21 1.10.2 1.8.1 3.1.3 0.2.x - 0.3.0 2.2.0 \" \" \" 0.3.1 - 0.3.2 \" \" 1.9.0 \" 0.3.3 \" \" \" 3.2.1 0.3.4 - 0.3.7 \" \" \" 3.2.3 0.3.8 - 0.4.3 2.2.10 \" \" \" 0.5.x 2.2.20 \" \" 3.3.0"},{"location":"dependency-matrix/#lokksmith-compose","title":"lokksmith-compose","text":"<p>Includes all dependencies from <code>lokksmith-core</code> plus:</p> Version Compose Multiplatform 0.3.x - 0.4.3 1.8.2 0.5.x 1.9.0"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#android","title":"Android","text":""},{"location":"faq/#temporal-validation-exceptions-in-emulator","title":"Temporal validation exceptions in emulator","text":"<p>I often get temporal validation exceptions in an Android emulator</p> <p>Android emulators are prone to clock drift, especially after running for extended periods and when regularly suspended and resumed. To work around this, there are several solutions:</p> <ul> <li>Perform a cold boot of the emulator</li> <li>Toggle the \"Automatic date and time\" setting off and on</li> <li>Increase the <code>leewaySeconds</code> option of the client</li> </ul>"},{"location":"migration/","title":"Migration from other libraries","text":"<p>Lokksmith provides the <code>Migration</code> utility class for migrating tokens from another OIDC library, enabling seamless user migration without requiring re-authentication.</p> <p>Warning</p> <p>The migration process should only be performed once for every client. It should not be used  for regular token management or refresh operations.</p> <pre><code>val lokksmith = createLokksmith()\nval client = lokksmith.get(\"client-key\")\n\n// Replace values with actual tokens and expiration timestamps\n// from other library.\n\nlokksmith.migration.setTokens(\n    client = client,\n    accessToken = \"ACCESS TOKEN\",\n    accessTokenExpiresAt = 1749471081,\n    refreshToken = \"REFRESH TOKEN\",\n    refreshTokenExpiresAt = 1752063081,\n    idToken = \"ID TOKEN\",\n)\n</code></pre> <p>Tip</p> <p>If you're migrating tokens from AppAuth, note that AppAuth does not provide a refresh token expiration value. Use the access token's expiration time for <code>refreshTokenExpiresAt</code>, and then perform a token refresh immediately afterward.</p> <pre><code>lokksmith.migration.setTokens(\n    client = client,\n    accessToken = appAuthState.accessToken!!,\n    accessTokenExpiresAt = appAuthState.accessTokenExpirationTime,\n    refreshToken = appAuthState.refreshToken,\n    refreshTokenExpiresAt = appAuthState.accessTokenExpirationTime, // access token refresh\n    idToken = appAuthState.idToken!!,\n)\n\nclient.refresh() // perform token refresh\n</code></pre>"},{"location":"resources/","title":"Resources","text":"<p>Some helpful resources that we also use during development of this library.</p> <ul> <li>OAuth 2.0</li> <li>OAuth 2.0 Simplified</li> </ul>"},{"location":"resources/#specifications","title":"Specifications","text":"<ul> <li>OpenID Connect Core 1.0</li> <li>The OAuth 2.0 Authorization Framework (RFC 6749)</li> <li>OAuth 2.0 for Native Apps (RFC 8252)</li> <li>Proof Key for Code Exchange by OAuth Public Clients (RFC 7636)</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you integrate Lokksmith into your Kotlin Multiplatform or plain Android application.</p> <ul> <li>Installation</li> <li>Usage</li> <li>Demo</li> </ul>"},{"location":"getting-started/demo/","title":"Demo","text":"<p>Please have a look at our Compose Multiplatform demo application.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Lokksmith is distributed via Maven Central. We recommend using Gradle Version Catalogs for dependency management.</p>"},{"location":"getting-started/installation/#add-lokksmith-to-version-catalog","title":"Add Lokksmith to Version Catalog","text":"<p>Add the current version of Lokksmith to your <code>gradle/libs.versions.toml</code>:</p> gradle/libs.versions.toml<pre><code>[versions]\nlokksmith = \"0.5.0\"\n\n[libraries]\nlokksmith-core = { module = \"dev.lokksmith:lokksmith-core\", version.ref = \"lokksmith\" }\n</code></pre>"},{"location":"getting-started/installation/#snapshot-version","title":"Snapshot version","text":"<p>If you want to use a snapshot version of Lokksmith, add the following configuration to the <code>dependencyResolutionManagement.repositories</code> node in your root <code>settings.gradle.kts</code> or <code>repositories</code> in the module's <code>build.gradle.kts</code>:</p> <pre><code>maven {\n    setUrl(\"https://central.sonatype.com/repository/maven-snapshots/\")\n    content { includeGroup(\"dev.lokksmith\") }\n}\n</code></pre> <p>Tip</p> <p>You'll find the newest snapshot version here.</p>"},{"location":"getting-started/installation/#add-lokksmith-to-project-dependencies","title":"Add Lokksmith to Project Dependencies","text":"<p>In your <code>build.gradle.kts</code>, add Lokksmith to the appropriate source set:</p> build.gradle.kts<pre><code>kotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(libs.lokksmith.core)\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/installation/#compose","title":"Compose","text":"<p>Lokksmith provides an additional artifact, <code>lokksmith-compose</code>, for seamless integration with Jetpack Compose and Compose Multiplatform for Android and iOS.</p>"},{"location":"getting-started/installation/#add-the-compose-artifact","title":"Add the Compose Artifact","text":"gradle/libs.versions.toml<pre><code>[libraries]\nlokksmith-compose = { module = \"dev.lokksmith:lokksmith-compose\", version.ref = \"lokksmith\" }\n</code></pre>"},{"location":"getting-started/installation/#add-compose-dependency-to-source-set","title":"Add Compose Dependency to Source Set","text":"build.gradle.kts<pre><code>commonMain.dependencies {\n    implementation(libs.lokksmith.compose)\n}\n</code></pre>"},{"location":"getting-started/installation/#android","title":"Android","text":""},{"location":"getting-started/installation/#specify-redirect-scheme","title":"Specify Redirect Scheme","text":"<p>To allow Lokksmith's <code>Activity</code> to receive OAuth responses, specify your app's redirect scheme in <code>build.gradle.kts</code>. Use only the scheme part (e.g., <code>my-app</code> for <code>my-app://openid-response</code>):</p> build.gradle.kts<pre><code>android {\n    defaultConfig {\n        addManifestPlaceholders(\n            mapOf(\"lokksmithRedirectScheme\" to \"my-app\") // (1)!\n        )\n    }\n}\n</code></pre> <ol> <li>Replace <code>my-app</code> with your own scheme</li> </ol>"},{"location":"getting-started/installation/#optional-using-app-links-for-redirection","title":"Optional: Using App Links for Redirection","text":"<p>To enhance security, it is recommended to use verified App Links for handling OIDC redirects into your app. Lokksmith cannot automatically add the required manifest entry for App Links, so you must manually update your <code>AndroidManifest.xml</code> as follows:</p> AndroidManifest.xml<pre><code>&lt;activity\n        android:name=\"dev.lokksmith.android.LokksmithRedirectActivity\"\n        android:exported=\"true\"&gt;\n    &lt;intent-filter tools:node=\"removeAll\" /&gt; &lt;!-- (1)! --&gt;\n    &lt;intent-filter android:autoVerify=\"true\"&gt;\n        &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n\n        &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n        &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;\n\n        &lt;data \n            android:scheme=\"https\"\n            android:host=\"example.com\"\n            android:path=\"/redirect\" /&gt; &lt;!-- (2)! --&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre> <ol> <li>Optional: Removes any existing intent filters added by Lokksmith</li> <li>Update host and path to match your redirect URI</li> </ol> Note <ul> <li>Replace <code>example.com</code> and <code>/redirect</code> with the actual host and path used in your OIDC redirect URI.</li> <li>Ensure your website is properly configured for App Links verification   by serving the Digital Asset Links JSON file at <code>https://example.com/.well-known/assetlinks.json</code>.</li> <li>This configuration ensures only your app can handle the redirect, improving security against malicious interception.</li> </ul>"},{"location":"getting-started/installation/#r8-proguard","title":"R8 / ProGuard","text":"<p>Lokksmith uses Kotlin Serialization internally and depends on the ProGuard configuration provided by the library. Usually this configuration is applied automatically. However, if you manually configure ProGuard you must ensure to apply the Kotlin Serialization rules or else Lokksmith will fail at (de)serialization.</p>"},{"location":"getting-started/usage/","title":"Usage","text":"<p>The main entry point is the <code>Lokksmith</code> class, which manages and persists authentication clients and their state across your application. To obtain an instance, use the platform-specific <code>createLokksmith()</code> function. The function has an optional <code>options</code> argument for tweaking the behaviour of Lokksmith. Please read the source code documentation for details.</p> <p>Note</p> <p>It is recommended to create a single shared <code>Lokksmith</code> instance, ideally provided via dependency injection.</p> <pre><code>val lokksmith = createLokksmith()\n</code></pre> <p>Info</p> <p>On Android the factory function also requires the current <code>Context</code>.</p> <p>Use <code>getOrCreate()</code> to retrieve an existing client by its unique key, or create a new one if it does not exist. This key is independent of the OAuth client ID, but you may use the same value if it suits your use case. Defining distinct keys allows you to manage multiple authentication clients within your application.</p> <pre><code>val client = lokksmith.getOrCreate(\"my-key\") {\n    id = \"my-client-id\"\n    discoveryUrl = \"https://example.com/.well-known/openid-configuration\"\n}\n</code></pre> <p>Note</p> <p>Many functions of Lokksmith are suspending and must be run in a Coroutine, like <code>getOrCreate()</code> in this case.</p> <p>Once you have a client instance, it is time to call the Authorization Code Flow to obtain the tokens.</p> <pre><code>val authFlow = client.authorizationCodeFlow(\n    AuthorizationCodeFlow.Request( // (1)!\n        redirectUri = \"my-app://openid-response\"\n    )\n)\n\nval initiation = authFlow.prepare()\n</code></pre> <ol> <li>See code documentation of <code>AuthorizationCodeFlow.Request</code> for more details.</li> </ol> <p>The next step is to call the request URL from the <code>Initiation</code> object and pass the returned response to the auth flow.</p> <pre><code>// Open system browser with initiation.requestUrl, pass response to auth flow\n\nauthFlow.onResponse(response)\n</code></pre> <p>Note</p> <p>See platform-specific implementation details below.</p> <p>In a best case scenario the client is now authenticated and received the tokens.</p> <p>You can now access the tokens through <code>client.tokens</code>, which is a Coroutine Flow, or <code>client.runWithTokens()</code>.</p> <p>Note</p> <p>The <code>tokens</code> Flow does not automatically refresh tokens when they expire. Use <code>runWithTokens()</code> to ensure fresh tokens when required.</p>"},{"location":"getting-started/usage/#singleton","title":"Singleton","text":"<p>A singleton <code>Lokksmith</code> instance must be provided during application startup as soon as possible via  <code>SingletonLokksmithProvider</code>. This provider ensures that platform-specific response handling, which is decoupled from the initiation of an auth flow and is launched by the system implicitly, is able  to retrieve the <code>Lokksmith</code> instance. On Android this should be executed in the <code>Application</code> class, for example.</p> <pre><code>SingletonLokksmithProvider.set(\n    lokksmith = createLokksmith(),\n    coroutineScope = MainScope(),\n)\n</code></pre>"},{"location":"getting-started/usage/#platform-implementations","title":"Platform implementations","text":"<p>Calling the system browser and handling the authentication response on mobile platforms involves multiple steps, including managing process death and app recreation. To ensure a seamless user experience, it is essential to persist and restore authentication state as needed. Lokksmith provides platform-specific implementations that abstract these complexities, making it easier to integrate secure authentication flows in your application.</p>"},{"location":"getting-started/usage/#compose-multiplatform","title":"Compose Multiplatform","text":"<p>Once you receive the <code>Initiation</code> object, use <code>AuthFlowLauncher</code> to start the authentication flow from your Composable. For example:</p> <pre><code>val uiState by viewModel.uiState.collectAsStateWithLifecycle() // (1)!\nval authFlowLauncher = rememberAuthFlowLauncher()\n\nLaunchedEffect(uiState.initiation) {\n    uiState.initiation?.let { initiation -&gt;\n        authFlowLauncher.launch(initiation)    \n    }\n}\n</code></pre> <ol> <li><code>data class UiState(val initiation: Initiation? = null)</code></li> </ol> <p>Tip</p> <p><code>launch</code> accepts an optional <code>options</code> argument that allows you to customize Lokksmith's behavior. For example, on Android, you can choose between authentication using a Custom Tab or an Auth Tab.</p> <p>You can either use <code>authFlowLauncher.result</code> to observe the current state of the process and update the user interface accordingly or use <code>Client.authFlowResult</code>(1) from your business logic (e.g. <code>ViewModel</code>) to pass the same result state to your UI state.</p> <ol> <li>See <code>AuthFlowResultProvider</code></li> </ol>"},{"location":"getting-started/usage/#ios","title":"iOS","text":"<p>The iOS integration is currently usable from a Kotlin Multiplatform or Compose Multiplatform application. A dedicated Swift package for use in a native iOS app is still pending.</p> <p>To launch an authentication flow from the iOS platform code of a Kotlin Multiplatform application, use <code>launchAuthFlow()</code>:</p> <pre><code>lokksmith.launchAuthFlow(initiation)\n</code></pre>"}]}